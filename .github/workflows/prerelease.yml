name: Pre-release Model

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  calculate-and-tag:
    name: Calculate & Tag Pre-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.calculate_version.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed to access all tags and branches

      - name: Calculate pre-release version
        id: calculate_version
        run: |
          # The base version is the stable tag that triggered the workflow
          BASE_TAG=${{ github.ref_name }}
          echo "Triggered by stable tag: $BASE_TAG"
          
          # Strip the 'v' prefix
          BASE_VERSION=${BASE_TAG#v}
          IFS=. read MAJOR MINOR PATCH <<< "$BASE_VERSION"
          
          # Increment the patch number for the new pre-release cycle
          PATCH=$((PATCH + 1))
          
          # Use a timestamp for the pre-release identifier
          TS=$(date +%Y%m%d%H%M%S)
          PRE_RELEASE_VERSION="$MAJOR.$MINOR.$PATCH-pre.$TS"
          
          echo "Calculated pre-release version: v$PRE_RELEASE_VERSION"
          # Set the output for other jobs
          echo "version=$PRE_RELEASE_VERSION" >> $GITHUB_OUTPUT

      - name: Tag the latest commit on 'main'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Get the SHA of the latest commit on the main branch
          SHA=$(git rev-parse origin/main)
          echo "Tagging commit $SHA on main with v${{ steps.calculate_version.outputs.version }}"
          
          # Create and push the new pre-release tag
          git tag "v${{ steps.calculate_version.outputs.version }}" $SHA
          git push origin "v${{ steps.calculate_version.outputs.version }}"


  build-and-publish:
    name: Build & Create GitHub Pre-release
    needs: calculate-and-tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      packages: write

    steps:
      - name: Checkout code at the newly created tag
        uses: actions/checkout@v4
        with:
          # Checkout the specific tag created in the previous job
          ref: 'refs/tags/v${{ needs.calculate-and-tag.outputs.version }}'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install "dvc[gdrive]"

      - name: Configure DVC remote
        run: |
          dvc remote modify gdrive_remote gdrive_service_account_json_file_path .dvc/gdrive_sa_credentials.json

      - name: Create service account file from secret
        env:
          GDRIVE_CREDS_JSON: ${{ secrets.GDRIVE_SA_JSON }}
        run: |
          python -c "import os; f = open('.dvc/gdrive_sa_credentials.json', 'w'); f.write(os.environ['GDRIVE_CREDS_JSON']); f.close()"

      - name: Pull data
        env:
          GDRIVE_ACKNOWLEDGE_ABUSE: "true"
        run: dvc pull

      - name: Run preprocessing
        run: python pipeline/data_processing.py

      - name: Train model
        run: python pipeline/training.py

      - name: Create GitHub Pre-release with Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ needs.calculate-and-tag.outputs.version }}"
          prerelease: true
          files: |
            models/count_vectorizer.joblib
            models/naive_bayes.joblib
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}